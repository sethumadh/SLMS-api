generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  APPLICANT
  WAITLISTED
  STUDENT
  ALUMNI
}

enum PaymentMethod {
  ONLINE
  SCHOOL
  NA
  DISCOUNT
}

enum PaymentStatus {
  PENDING
  PAID
  NODUES
}

enum PaymentType {
  MONTHLY
  TERM
}

model Student {
  id                Int                @id @default(autoincrement())
  role              Role               @default(APPLICANT)
  isActive          Boolean            @default(false) // RUN A CRON JOB TO MAKE THIS FIELD TRUE FOR CURRENT STUDENT
  enrollments       Enrollment[]
  personalDetails   PersonalDetails?
  parentsDetails    ParentsDetails?
  emergencyContact  EmergencyContact?
  healthInformation HealthInformation?
  otherInformation  OtherInformation?
  studentTermFee    StudentTermFee[]
  subjectsChosen    String[]
  subjectRelated    String[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model PersonalDetails {
  id        Int      @id @default(autoincrement())
  studentId Int      @unique
  firstName String
  lastName  String
  DOB       DateTime
  gender    String
  email     String
  contact   String
  address   String
  suburb    String
  state     String
  country   String
  postcode  String
  image     String?
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model ParentsDetails {
  id            Int     @id @default(autoincrement())
  fatherName    String
  motherName    String
  parentEmail   String
  parentContact String
  studentId     Int     @unique
  student       Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model EmergencyContact {
  id            Int     @id @default(autoincrement())
  contactPerson String
  contactNumber String
  relationship  String
  studentId     Int     @unique
  student       Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model HealthInformation {
  id                        Int     @id @default(autoincrement())
  medicareNumber            String? @default("Medicare Number not provided")
  ambulanceMembershipNumber String?
  medicalCondition          String
  allergy                   String
  studentId                 Int     @unique
  student                   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model OtherInformation {
  id          Int      @id @default(autoincrement())
  otherInfo   String   @default("No information provided")
  declaration String[]
  studentId   Int      @unique
  student     Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Subject {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @unique
  isActive                Boolean                   @default(true)
  termSubject             TermSubject[]
  termSubjectGroupSubject TermSubjectGroupSubject[]
  termSubjectGroup        TermSubjectGroup[]
  termSubjectLevel        TermSubjectLevel[]
}

model SubjectGroup {
  id                      Int                       @id @default(autoincrement())
  isActive                Boolean                   @default(true)
  groupName               String                    @unique
  termSubjectGroup        TermSubjectGroup[]
  termSubjectGroupSubject TermSubjectGroupSubject[]
}

model Term {
  id                      Int                       @id @default(autoincrement())
  isPublish               Boolean                   @default(false)
  currentTerm             Boolean                   @default(false)
  name                    String                    @unique
  startDate               DateTime
  endDate                 DateTime
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  termSubject             TermSubject[]
  termSubjectGroup        TermSubjectGroup[]
  termSubjectGroupSubject TermSubjectGroupSubject[]
  studentTermFee          StudentTermFee[]
  termSubjectLevel        TermSubjectLevel[]
}

model Level {
  id               Int                @id @default(autoincrement())
  isActive         Boolean            @default(true)
  name             String             @unique
  termSubject      TermSubject[]
  TermSubjectLevel TermSubjectLevel[]
}

model Section {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  termSubjectLevel TermSubjectLevel[]
  enrollments      Enrollment[]
}

model TermSubjectGroup {
  id                      Int                       @id @default(autoincrement())
  termId                  Int
  feeId                   Int?
  subjectGroupId          Int
  fee                     Fee?                      @relation(fields: [feeId], references: [id], onDelete: Cascade)
  term                    Term                      @relation(fields: [termId], references: [id], onDelete: Cascade)
  subjectGroup            SubjectGroup              @relation(fields: [subjectGroupId], references: [id])
  enrollment              Enrollment[]
  subject                 Subject[]
  termSubject             TermSubject[]
  termSubjectGroupSubject TermSubjectGroupSubject[]
  studentTermFee          StudentTermFee[]

  @@unique([termId, subjectGroupId])
}

model TermSubject {
  id                 Int                 @id @default(autoincrement())
  termSubjectGroupId Int
  subjectId          Int
  termId             Int
  level              Level[]
  subject            Subject             @relation(fields: [subjectId], references: [id])
  subjectEnrollments SubjectEnrollment[]
  term               Term                @relation(fields: [termId], references: [id], onDelete: Cascade)
  termSubjectGroup   TermSubjectGroup    @relation(fields: [termSubjectGroupId], references: [id])

  @@unique([termId, subjectId, termSubjectGroupId])
}

model TermSubjectLevel {
  id          Int          @id @default(autoincrement())
  termId      Int
  subjectId   Int
  levelId     Int
  sections    Section[]
  term        Term         @relation(fields: [termId], references: [id])
  subject     Subject      @relation(fields: [subjectId], references: [id])
  level       Level        @relation(fields: [levelId], references: [id])
  enrollments Enrollment[]

  @@unique([termId, subjectId, levelId])
}

model StudentClassHistory {
  id                 Int        @id @default(autoincrement())
  enrollmentId       Int
  studentId          Int
  termSubjectLevelId Int
  sectionId          Int
  changeDate         DateTime   @default(now())
  note               String? // Optional field for notes
  enrollment         Enrollment @relation(fields: [enrollmentId], references: [id])
}

model Enrollment {
  id                      Int                       @id @default(autoincrement())
  studentId               Int
  dueDate                 DateTime
  termSubjectGroupId      Int
  subjectEnrollmentId     Int?                      @unique
  createdAt               DateTime                  @default(now())
  sectionId               Int?
  termSubjectLevelId      Int?
  student                 Student                   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  termSubjectGroup        TermSubjectGroup          @relation(fields: [termSubjectGroupId], references: [id])
  termSubjectGroupSubject TermSubjectGroupSubject[]
  subjectEnrollment       SubjectEnrollment?
  section                 Section?                  @relation(fields: [sectionId], references: [id])
  termSubjectLevel        TermSubjectLevel?         @relation(fields: [termSubjectLevelId], references: [id])
  studentClassHistory     StudentClassHistory[]

  @@unique([studentId, termSubjectGroupId, subjectEnrollmentId])
}

model SubjectEnrollment {
  id            Int         @id @default(autoincrement())
  enrollmentId  Int         @unique
  termSubjectId Int
  grade         String      @default("No Grades yet") // Optional, for storing grades
  attendance    Boolean[] // Optional, for storing attendance
  enrollment    Enrollment  @relation(fields: [enrollmentId], references: [id])
  termSubject   TermSubject @relation(fields: [termSubjectId], references: [id])

  @@unique([enrollmentId, termSubjectId])
}

model Fee {
  id               Int                @id @default(autoincrement())
  amount           Int
  paymentType      PaymentType
  termSubjectGroup TermSubjectGroup[]
  feePayment       FeePayment[]

  @@unique([amount, paymentType])
}

model StudentTermFee {
  id                 Int              @id @default(autoincrement())
  studentId          Int
  termSubjectGroupId Int
  termId             Int
  feePayment         FeePayment[]
  student            Student          @relation(fields: [studentId], references: [id])
  termSubjectGroup   TermSubjectGroup @relation(fields: [termSubjectGroupId], references: [id])
  term               Term             @relation(fields: [termId], references: [id])

  @@unique([studentId, termSubjectGroupId, termId])
}

model FeePayment {
  id               Int             @id @default(autoincrement())
  feeId            Int
  dueDate          DateTime
  paidDate         DateTime? // Nullable, set when payment is made
  amount           Int
  dueAmount        Int // Amount still due (if any)
  studentTermFeeId Int?
  status           PaymentStatus   @default(NODUES)
  method           PaymentMethod   @default(NA)
  fee              Fee             @relation(fields: [feeId], references: [id])
  studentTermFee   StudentTermFee? @relation(fields: [studentTermFeeId], references: [id], onDelete: Cascade)
}

model TermSubjectGroupSubject {
  id                 Int               @id @default(autoincrement())
  termId             Int
  subjectGroupId     Int
  termSubjectGroupId Int?
  enrollmentId       Int?
  subjectId          Int
  term               Term              @relation(fields: [termId], references: [id], onDelete: Cascade)
  subjectGroup       SubjectGroup      @relation(fields: [subjectGroupId], references: [id])
  subject            Subject           @relation(fields: [subjectId], references: [id])
  termSubjectGroup   TermSubjectGroup? @relation(fields: [termSubjectGroupId], references: [id], onDelete: Cascade)
  enrollment         Enrollment?       @relation(fields: [enrollmentId], references: [id])

  @@unique([termId, subjectGroupId, subjectId])
}

model TimeTable {
  id        Int      @id @default(autoincrement())
  name      String?  @default("Timetable")
  isActive  Boolean  @default(true)
  data      Json
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}
