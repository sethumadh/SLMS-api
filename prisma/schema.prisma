generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  APPLICANT
  WAITLISTED
  STUDENT
  ALUMNI
}

enum PaymentMethod {
  ONLINE
  SCHOOL
  NA
  DISCOUNT
}

enum PaymentStatus {
  PENDING
  PAID
  NODUES
}

enum PaymentType {
  MONTHLY
  TERM
}

model Student {
  id                Int                @id @default(autoincrement())
  role              Role               @default(APPLICANT)
  enrollments       Enrollment[]
  personalDetails   PersonalDetails?
  parentsDetails    ParentsDetails?
  emergencyContact  EmergencyContact?
  healthInformation HealthInformation?
  otherInformation  OtherInformation?
  subjectsChosen    String[]
  subjectRelated    String[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model PersonalDetails {
  id        Int     @id @default(autoincrement())
  firstName String
  lastName  String
  DOB       String?
  gender    String
  email     String
  contact   String
  address   String
  suburb    String
  state     String
  country   String
  postcode  String
  image     String?
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId Int     @unique
}

model ParentsDetails {
  id            Int     @id @default(autoincrement())
  fatherName    String
  motherName    String
  parentEmail   String
  parentContact String
  studentId     Int     @unique
  student       Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model EmergencyContact {
  id            Int     @id @default(autoincrement())
  contactPerson String
  contactNumber String
  relationship  String
  studentId     Int     @unique
  student       Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model HealthInformation {
  id                        Int     @id @default(autoincrement())
  medicareNumber            String? @default("Medicare Number not provided")
  ambulanceMembershipNumber String?
  medicalCondition          String
  allergy                   String
  studentId                 Int     @unique
  student                   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model OtherInformation {
  id          Int      @id @default(autoincrement())
  otherInfo   String   @default("No information provided")
  declaration String[]
  student     Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId   Int      @unique
}

model Subject {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @unique
  isActive                Boolean                   @default(true)
  subjectGroups           SubjectGroup[]
  termSubject             TermSubject[]
  termSubjectGroupSubject TermSubjectGroupSubject[]
  TermSubjectGroup        TermSubjectGroup?         @relation(fields: [termSubjectGroupId], references: [id])
  termSubjectGroupId      Int?
}

model SubjectGroup {
  id                      Int                       @id @default(autoincrement())
  isActive                Boolean                   @default(true)
  groupName               String                    @unique
  subjects                Subject[]
  termSubjectGroup        TermSubjectGroup[]
  termSubjectGroupSubject TermSubjectGroupSubject[]
}

model Term {
  id                      Int                       @id @default(autoincrement())
  isPublish               Boolean                   @default(false)
  currentTerm             Boolean                   @default(false)
  name                    String                    @unique
  startDate               DateTime
  endDate                 DateTime
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  termSubjectGroup        TermSubjectGroup[]
  termSubjectGroupSubject TermSubjectGroupSubject[]
}

model Level {
  id          Int           @id @default(autoincrement())
  isActive    Boolean       @default(true)
  name        String        @unique
  termSubject TermSubject[]
}

model TermSubjectGroup {
  id                      Int                       @id @default(autoincrement())
  termId                  Int
  feeId                   Int?
  subjectGroupId          Int
  fee                     Fee?                      @relation(fields: [feeId], references: [id], onDelete: Cascade)
  term                    Term                      @relation(fields: [termId], references: [id], onDelete: Cascade)
  subjectGroup            SubjectGroup              @relation(fields: [subjectGroupId], references: [id] )
  enrollment              Enrollment[]
  subject                 Subject[]
  termSubject             TermSubject[]
  termSubjectGroupSubject TermSubjectGroupSubject[]

  @@unique([termId, subjectGroupId])
}

model TermSubject {
  id                 Int              @id @default(autoincrement())
  termSubjectGroupId Int
  subjectId          Int
  levelId            Int
  subject            Subject          @relation(fields: [subjectId], references: [id])
  level              Level            @relation(fields: [levelId], references: [id])
  termSubjectGroup   TermSubjectGroup @relation(fields: [termSubjectGroupId], references: [id], onDelete: Cascade)
}

model Enrollment {
  id                      Int                       @id @default(autoincrement())
  studentId               Int
  dueDate                 DateTime
  termSubjectGroupId      Int
  student                 Student                   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  feePayment              FeePayment[]
  termSubjectGroup        TermSubjectGroup          @relation(fields: [termSubjectGroupId], references: [id])
  termSubjectGroupSubject TermSubjectGroupSubject[]

  @@unique([studentId, termSubjectGroupId])
}

model Fee {
  id               Int                @id @default(autoincrement())
  amount           Int
  paymentType      PaymentType
  termSubjectGroup TermSubjectGroup[]

  @@unique([amount, paymentType])
}

model FeePayment {
  id           Int           @id @default(autoincrement())
  enrollmentId Int
  dueDate      DateTime
  paidDate     DateTime? // Nullable, set when payment is made
  amount       Int
  dueAmount    Int // Amount still due (if any)
  status       PaymentStatus @default(NODUES)
  method       PaymentMethod @default(NA)
  enrollment   Enrollment    @relation(fields: [enrollmentId], references: [id])
}

model TermSubjectGroupSubject {
  id                 Int               @id @default(autoincrement())
  termId             Int
  subjectGroupId     Int
  subjectId          Int
  term               Term              @relation(fields: [termId], references: [id], onDelete:Cascade)
  subjectGroup       SubjectGroup      @relation(fields: [subjectGroupId], references: [id])
  subject            Subject           @relation(fields: [subjectId], references: [id])
  termSubjectGroup   TermSubjectGroup? @relation(fields: [termSubjectGroupId], references: [id],onDelete:Cascade)
  termSubjectGroupId Int?
  enrollment         Enrollment?       @relation(fields: [enrollmentId], references: [id])
  enrollmentId       Int?

  @@unique([termId, subjectGroupId, subjectId])
}
