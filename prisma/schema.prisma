// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
  ALUMNI
}

model Student {
  id                Int                @id @default(autoincrement())
  enrollments       Enrollment[]
  personalDetails   PersonalDetails?
  parentsDetails    ParentsDetails?
  emergencyContact  EmergencyContact?
  healthInformation HealthInformation?
  otherInformation  OtherInformation?
  feedback          Feedback[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model PersonalDetails {
  id        Int     @id @default(autoincrement())
  role      Role    @default(STUDENT)
  firstName String
  lastName  String
  DOB       String?
  gender    String
  email     String  @unique
  contact   String  @unique
  address   String
  suburb    String
  state     String
  country   String
  postcode  String
  image     String?
  Student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId Int     @unique

  @@index([email])
}

model ParentsDetails {
  id            Int     @id @default(autoincrement())
  fatherName    String
  motherName    String
  parentEmail   String
  parentContact String
  studentId     Int     @unique
  Student       Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model EmergencyContact {
  id            Int     @id @default(autoincrement())
  contactPerson String
  contactNumber String
  relationship  String
  studentId     Int     @unique
  Student       Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model HealthInformation {
  id                        Int     @id @default(autoincrement())
  medicareNumber            String  @unique
  ambulanceMembershipNumber String?
  medicalCondition          String
  allergy                   String
  studentId                 Int     @unique
  Student                   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model OtherInformation {
  id          Int      @id @default(autoincrement())
  otherInfo   String   @default("No information provided")
  declaration String[]
  Student     Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId   Int      @unique
}

model Subject {
  id          Int          @id @default(autoincrement())
  name        String
  isActive    Boolean      @default(true)
  levels      Level[]
  enrollments Enrollment[]
  fees        Fee? // Fees associated with the subject
}

model Term {
  id          Int          @id @default(autoincrement())
  currentTerm Boolean      @default(true)
  name        String       @unique // e.g., Q1-2024
  startDate   DateTime // The start date of the term
  endDate     DateTime // The end date of the term, which would be startDate + 3 months
  enrollments Enrollment[]
}

model Level {
  id          Int          @id @default(autoincrement())
  name        String // e.g., Beginner, Intermediate, Advanced
  subjects    Subject[]
  enrollments Enrollment[]
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  studentId Int
  subjectId Int
  levelId   Int
  termId    Int      @unique
  dueDate   DateTime // Add this line to store due date
  fee       Fee? // Optional, if you want to link a fee directly to an enrollment

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject Subject @relation(fields: [subjectId], references: [id])
  level   Level   @relation(fields: [levelId], references: [id])
  term    Term    @relation(fields: [termId], references: [id])

  @@unique([studentId, subjectId, levelId, termId])
}

model Fee {
  id           Int @id @default(autoincrement())
  amount       Int
  enrollmentId Int @unique
  // dueDate is removed since it's calculated from Term's startDate

  enrollment Enrollment @relation(fields: [enrollmentId], references: [id])
  Subject    Subject    @relation(fields: [subjectId], references: [id])
  subjectId  Int        @unique
}

model Feedback {
  id        Int      @id @default(autoincrement())
  feedback  String
  Student   Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
